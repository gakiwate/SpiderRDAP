#!/usr/bin/env python3

import argparse
from os import path
from spider_rdap_aws import RDAPManagerAWS
import logging
from logging.handlers import TimedRotatingFileHandler
from time import sleep

LEVELS = {'debug': logging.DEBUG,
          'info': logging.INFO,
          'warning': logging.WARNING,
          'error': logging.ERROR,
          'critical': logging.CRITICAL
          }


def isValidPath(save_path):
    if path.isdir(save_path):
        return save_path
    raise argparse.ArgumentTypeError("{save_path} is not a valid path")


parser = argparse.ArgumentParser(description='SpiderRDAPAWS')
parser.add_argument('--domain-list', action='store', type=argparse.FileType('r'),
                    help='file with list of domains', required=True)
parser.add_argument('--save_path', action='store', type=lambda save_path: isValidPath(save_path),
                    help='file path to save RDAP Output', required=True)
parser.add_argument('--aws-config', action='store', type=argparse.FileType('r'),
                    help='AWS Config File', required=True)
parser.add_argument("--log-level", default="warning",
                    choices=list(LEVELS.keys()))
parser.add_argument("--batch-multiplier", action='store', type=int,
                    default=30, help="multiplier to decide on number of domains to batch")
parser.add_argument("--retry-count", action='store', type=int,
                    default=1, help="number of times to retry RDAP query")
parser.add_argument("--quiet", action='store_true', help='Quiesce output')
config = parser.parse_args()

"""
Set up logger
"""
logger = logging.getLogger("SpiderRDAPAWS")
logger.setLevel(logging.DEBUG)
ch = TimedRotatingFileHandler(
    '{}/spiderRDAPAWS.log'.format(config.save_path), when='h', interval=1, backupCount=5)
ch.setLevel(LEVELS[config.log_level])
formatter = logging.Formatter(
    '%(asctime)s - %(levelname)s - %(name)s - %(message)s')
ch.setFormatter(formatter)
logger.addHandler(ch)
logger.info("Starting Manager")

"""
Manager Start Up
"""
manager = RDAPManagerAWS(config)
manager.start()


"""
Stay alive till manager dies
"""
print("skipped\tfailed\tin_progress\tdone\ttld_unsupported")
while manager.isAlive():
    if not config.quiet:
        stats = manager.stats
        status_line = "{}\t{}\t{}\t{}\t{}\r".format(
            stats['skipped'], stats['failed'], stats['in_progress'], stats['done'], stats['tld_unsupported'])
        print(status_line, end='')
    sleep(1)
print("")
